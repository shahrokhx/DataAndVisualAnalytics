-- initial commands
.headers off
.separator ','

-- (a) Import data
-- [insert sql statement(s) below]

CREATE TABLE athletes(
id integer,
sex text,
dob text,
height float,
weight integer, 
nationality text
);

.import athletes.csv athletes

CREATE TABLE countries(
country text,
code text,
population integer,
gdp float
);

.import countries.csv countries

CREATE TABLE games(
id integer,
game text,
nationality text,
sport text,
gold integer,
silver integer,
bronze integer
);

.import games.csv games

-- (b) Build indexes
-- [insert sql statement(s) below]

CREATE INDEX id_index ON athletes(id);
CREATE INDEX nationality_index ON athletes(nationality);
CREATE INDEX id_games_index ON games(id);
CREATE INDEX code_index ON countries(code);

-- (c) Quick computation.
-- [insert sql statement(s) below]

SELECT sum(gold) AS "count_usa_gold" FROM games
WHERE nationality = "USA";

select '';

-- (d) Distinct Sports.
-- [insert sql statement(s) below]

SELECT DISTINCT sport FROM games
WHERE nationality = "USA" AND gold = 1;

select '';

-- (e) Handling Empty Cells.
-- [insert sql statement(s) below]

UPDATE countries SET population = NULL where population='';

SELECT countries.country, sum(gold+silver+bronze) FROM games
INNER JOIN countries ON games.nationality = countries.code
GROUP BY games.nationality
ORDER by countries.population DESC
LIMIT 5;


select '';

-- (f) Female Athletes.
-- [insert sql statement(s) below]

SELECT countries.country,sum(games.gold) AS female_golds FROM athletes
INNER JOIN countries ON athletes.nationality = countries.code
INNER JOIN games ON games.id = athletes.id
WHERE athletes.sex="female" 
GROUP BY countries.country
HAVING female_golds>0
ORDER BY count(athletes.sex) DESC
LIMIT 5;

select '';

-- (g) Fit Athletes
-- [insert sql statement(s) below]
--       RENAMEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE  ---

SELECT games.game,weight/(height*height) AS bmi FROM athletes
INNER JOIN games ON games.id = athletes.id
WHERE bmi BETWEEN 18.5 AND 24.9
ORDER BY games.game ASC, bmi ASC
LIMIT 10;

select '';

-- (h) Percentages of Gold & Silver Medals.
-- [insert sql statement(s) below]

SELECT 
    countries.country,
    CAST(100.0 * sum(games.gold)/(SELECT sum(gold) FROM games) as int) AS gold_percent,
    CAST(100.0 * sum(games.silver)/(SELECT sum(silver) FROM games) as int) AS silver_percent
FROM games
INNER JOIN countries ON games.nationality = countries.code
GROUP BY games.nationality
ORDER BY gold_percent DESC, silver_percent DESC
LIMIT 20;

select '';

-- (i) Creating a view.
-- [insert sql statement(s) below]

CREATE VIEW gdp_metrics AS
SELECT cr1.country AS full_country1_name, 
       cr2.country AS full_country2_name, 
       (cr1.gdp-cr2.gdp) AS differnce_gdp
FROM countries AS cr1
INNER JOIN countries as cr2
WHERE differnce_gdp>0 AND differnce_gdp<= 100;


SELECT * FROM gdp_metrics 
ORDER BY 3 DESC
LIMIT 5;

select '';

-- (j) Count total pairs.
-- [insert sql statement(s) below]

SELECT count(*) FROM gdp_metrics AS count_total_pairs;

select '';

-- (k) Create and import data into FTS table movie_overview.
-- [insert sql statement(s) below]

CREATE VIRTUAL TABLE movie_overview
USING FTS4 (
id integer,
name text,
year integer,
overview text,
popularity decimal
);

.import movie-overview.txt movie_overview

-- (k) part 1
-- [insert sql statement(s) below]

SELECT count(overview) FROM movie_overview
AS count_overview_in
WHERE overview MATCH "^In * or ^in *";

select '';

-- (k) part 2
-- [insert sql statement(s) below]

SELECT id FROM movie_overview 
WHERE overview MATCH "love NEAR/7 city OR city NEAR/7 love" 
ORDER BY id ASC;

select '';

-- (k) part 3
-- [insert sql statement(s) below]

SELECT name FROM movie_overview AS movie_name
WHERE overview MATCH "geo* OR Geo*";
